version: "3.7"
services:

  server:
    image: drone/drone:1
    deploy:
      replicas: 1
      placement:
        constraints: [ node.labels.drone == true ]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=services"
        - "traefik.http.routers.drone.entrypoints=websecure"
        - "traefik.http.routers.drone.rule=HostHeader(`drone.test.local`, `www.drone.test.local`)"
        - "traefik.http.routers.drone.middlewares=servicesDefault@file"
        - "traefik.http.routers.drone.tls=true"
        - "traefik.http.services.drone.loadbalancer.server.port=80"
    networks:
      - services
    environment:
      - "DRONE_GIT_ALWAYS_AUTH=true"
      - "DRONE_GITEA_SERVER"
      - "DRONE_GITEA_CLIENT_ID"
      - "DRONE_GITEA_CLIENT_SECRET"
      - "DRONE_RPC_SECRET"
      - "DRONE_DATABASE_DRIVER=postgres"
      - "DRONE_DATABASE_DATASOURCE"
      - "DRONE_DATABASE_SECRET"
      - "DRONE_SERVER_PROTO=https"
      - "DRONE_SERVER_HOST"
      - "DRONE_AGENTS_ENABLED=true"
      - "DRONE_TLS_AUTOCERT=false"
      - "DRONE_USER_FILTER"

  agent:
    image: drone/agent:1
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
      replicas: 1
      placement:
        constraints: [ node.labels.drone == true ]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 10s
    networks:
      - services
    environment:
      - "DRONE_RPC_PROTO=https"
      - "DRONE_RPC_HOST"
      - "DRONE_RPC_SECRET"
      - "DRONE_RUNNER_CAPACITY"
      - "DRONE_RUNNER_NAME"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  services:
    external: true
